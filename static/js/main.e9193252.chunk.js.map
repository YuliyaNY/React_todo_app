{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","backgroundColor","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","deleteTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","uuid","v4","filter","newTodo","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAeA,IAAMA,EAAc,CAChBC,gBAAiB,OACjBC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGPC,EAAY,CAChBH,MAAO,OACPI,eAAgB,QAEHC,EAtBf,WACI,OACI,6BACI,4BAAQC,MAAOR,GACX,wCACA,kBAAC,IAAD,CAAMQ,MAAOH,EAAWI,GAAG,KAA3B,QAFJ,MAEiD,kBAAC,IAAD,CAAMD,MAAOH,EAAWI,GAAG,UAA3B,YCNhDC,EAAb,2MACIC,SAAW,WACP,MAAO,CACHV,gBAAiB,SACjBG,QAAS,OACTQ,aAAc,kBACdN,eAAgB,EAAKO,MAAMC,KAAKC,UAAY,eAAiB,SANzE,wEAWc,IAAD,EACiBC,KAAKH,MAAMC,KAAzBG,EADH,EACGA,GAAIC,EADP,EACOA,MACZ,OACI,yBAAKV,MAAOQ,KAAKL,YACb,2BACA,2BAAOQ,KAAK,WACZC,SAAUJ,KAAKH,MAAMQ,aAAaC,KAAKN,KAAMC,KAF7C,IAEqD,IACpDC,EACD,4BAAQK,QAASP,KAAKH,MAAMW,WAAWF,KAAKN,KAAMC,GAAKT,MAAOiB,GAA9D,WAnBhB,GAA8BC,aA+BxBD,EAAW,CACbxB,gBAAiB,MACjBC,MAAO,OACPyB,OAAQ,OACRvB,QAAS,UACTwB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAOIpB,ICzBAqB,E,iLAjBF,IAAD,OACR,OAAOf,KAAKH,MAAMmB,MAAMC,KAAI,SAACnB,GAAD,OACzB,kBAAC,EAAD,CACAoB,IAAKpB,EAAKG,GACVH,KAAMA,EACNO,aAAc,EAAKR,MAAMQ,aACzBG,WAAc,EAAKX,MAAMW,oB,GAPZE,a,QCkCLS,EArCf,2MACIC,MAAQ,CACJlB,MAAO,IAFf,EAKIE,SAAW,SAACiB,GACR,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SANjD,EASIC,SAAW,SAACL,GACRA,EAAEM,iBACF,EAAK9B,MAAM+B,QAAQ,EAAKR,MAAMlB,OAC9B,EAAKoB,SAAS,CAACpB,MAAO,MAZ9B,wEAgBQ,OACI,0BAAMwB,SAAU1B,KAAK0B,SAAUlC,MAAO,CAACqC,QAAS,SAC5C,2BACA1B,KAAK,OACLqB,KAAK,QACLM,YAAY,cACZtC,MAAO,CAACuC,KAAM,KAAM3C,QAAS,OAC7BqC,MAAOzB,KAAKoB,MAAMlB,MAClBE,SAAUJ,KAAKI,WAEf,2BACAD,KAAK,SACLsB,MAAM,SACNO,UAAU,MACVxC,MAAO,CAACuC,KAAM,YA9B9B,GAA6BrB,aCSduB,MATf,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,qCACA,wD,iBC8EGC,E,2MAtEbf,MAAQ,CACNJ,MAAO,CACL,CACEf,GAAImC,IAAKC,KACTnC,MAAO,sBACPH,WAAW,GAEb,CACEE,GAAImC,IAAKC,KACTnC,MAAO,mBACPH,WAAW,GAEb,CACEE,GAAImC,IAAKC,KACTnC,MAAO,sBACPH,WAAW,K,EAMjBM,aAAe,SAACJ,GACd,EAAKqB,SAAS,CAACN,MAAO,EAAKI,MAAMJ,MAAMC,KAAI,SAAAnB,GAIzC,OAHGA,EAAKG,KAAOA,IACbH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAKXU,WAAa,SAACP,GACZ,EAAKqB,SAAS,CAAEN,MAAM,YAAK,EAAKI,MAAMJ,MAAMsB,QAAO,SAAAxC,GAAI,OAAIA,EAAKG,KAAOA,S,EAIzE2B,QAAU,SAAC1B,GACT,IAAMqC,EAAU,CACdtC,GAAImC,IAAKC,KACTnC,QACAH,WAAW,GAEb,EAAKuB,SAAS,CAACN,MAAM,GAAD,mBAAM,EAAKI,MAAMJ,OAAjB,CAAwBuB,O,wEAGnC,IAAD,OACR,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA7C,GAAK,OACjC,kBAAC,IAAMqC,SAAP,KACE,kBAAC,EAAD,CAASN,QAAS,EAAKA,UACvB,kBAAC,EAAD,CACEZ,MAAO,EAAKI,MAAMJ,MAClBX,aAAc,EAAKA,aACnBG,WAAc,EAAKA,iBAIzB,kBAAC,IAAD,CAAOiC,KAAK,SAASE,UAAWV,W,GA9D1BvB,aCDEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e9193252.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\nfunction Header() {\n    return (\n        <div>\n            <header style={headerStyle}>\n                <h1>TodoList</h1>\n                <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n            </header>\n        </div>\n    )\n}\n\nconst headerStyle = {\n    backgroundColor: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n  color: '#fff',\n  textDecoration: 'none'\n}\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            backgroundColor: 'f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                <input type=\"checkbox\" \n                onChange={this.props.markComplete.bind(this, id)}/> {' '}\n                {title}\n                <button onClick={this.props.deleteTodo.bind(this, id)} style={btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// PropTypes\nTodoItem.propTypes = {\n    todos: PropTypes.object.isRequired\n}\n\nconst btnStyle = {\n    backgroundColor: 'red',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n\n}\n\n\n\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n\nclass Todos extends Component {\n  render () {\n    return this.props.todos.map((todo) => (\n       <TodoItem \n       key={todo.id} \n       todo={todo} \n       markComplete={this.props.markComplete}\n       deleteTodo = {this.props.deleteTodo}\n       />\n    ));\n  }\n\n}\n// PropTypes\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired\n}\n\nexport default Todos\n","import React, { Component } from 'react';\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n\n    onChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n                <input \n                type=\"text\" \n                name=\"title\" \n                placeholder=\"Add Todo...\" \n                style={{flex: '10', padding: '5px'}}  \n                value={this.state.title} \n                onChange={this.onChange}\n                />\n                <input \n                type=\"submit\"\n                value=\"Submit\"\n                className=\"btn\"\n                style={{flex: '1'}}\n                />\n            </form>\n        )\n    }\n}\n\nexport default AddTodo;\n","import React from 'react';\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is a TodoList app.</p>\n        </React.Fragment>\n    )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport uuid from 'uuid';\n\n\n\n\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid.v4(),\n        title: 'Meeting with friend',\n        completed: false\n      },\n      {\n        id: uuid.v4(),\n        title: 'Grocery shopping',\n        completed: false\n      },\n      {\n        id: uuid.v4(),\n        title: 'Make an appointment',\n        completed: false\n      }\n    ]\n  }\n\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) });\n  }\n\n  //Delete Todo\n  deleteTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] });\n  }\n\n  //Add Todo\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    this.setState({todos: [...this.state.todos, newTodo]})\n  }\n\n  render () {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path='/' render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo}/>\n                <Todos \n                  todos={this.state.todos}\n                  markComplete={this.markComplete}\n                  deleteTodo = {this.deleteTodo}\n                />\n              </React.Fragment>\n            )} />\n            <Route path='/about' component={About}/>\n          </div> \n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}